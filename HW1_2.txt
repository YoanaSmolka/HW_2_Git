HW_2 Postman


http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
3. Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
var jsonData = pm.response.json(); 
pm.test("Your test name", function () {
    pm.expect(jsonData.age).to.eql('28');
});
pm.test("Your test name", function () {
    pm.expect(jsonData.name).to.eql('Yoana');
});
pm.test("Your test name", function () {
    pm.expect(jsonData.salary).to.eql(1200);
});

7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
var resp = pm.response.json(); 
pm.test("YAge", function () {
    pm.expect(resp.age).to.eql('28');
});
pm.test("YName", function () {
    pm.expect(resp.name).to.eql('Yoana');
});
pm.test("YSalary", function () {
    pm.expect(resp.salary).to.eql(1200);
});
var req = request.data
console.log(req.name)

pm.test("Name", function () {
    pm.expect(resp.name).to.eql(req.name);
});

pm.test("Age", function () {
    pm.expect(resp.age).to.eql(req.age);
});
pm.test(«Salary, function () {
    pm.expect(resp.salary).to.eql(1*req.salary);
});

console.log(resp.family)

pm.test("U_Salary", function () {
    pm.expect(resp.family.u_salary_1_5_year).to.eql(req.salary*4);
});


http://162.55.220.72:5005/object_info_3
// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
var resp = pm.response.json();

// 4. Спарсить request.
var req = pm.request.url.query.toObject();

// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Name", function () {
    pm.expect(resp.name).to.eql(req.name);
});

// 6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Age", function () {
    pm.expect(resp.age).to.eql(req.age);
});
// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Salary", function () {
    pm.expect(resp.salary).to.eql(1*req.salary);
});
// 8. Вывести в консоль параметр family из response.
console.log(resp.family);
// 9. Проверить, что у параметра dog есть параметры name.
pm.test("dog_name", function () {
    pm.expect(resp.family.pets.dog).to.have.include({"name":"Luky"});
});
// 10. Проверить, что у параметра dog есть параметры age.
pm.test("dog_age", function () {
    pm.expect(resp.family.pets.dog).to.have.include({"age": 4});
})
// 11. Проверить, что параметр name имеет значение Luky.
pm.test("Luky", function () {
    pm.expect(resp.family.pets.dog.name).to.have.eql("Luky");
});

// 12. Проверить, что параметр age имеет значение 4.
pm.test("age4", function () {
    pm.expect(resp.family.pets.dog.age).to.have.eql(4);
});


http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
// 1. Отправить запрос.
// 2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
// 3. Спарсить response body в json.
var resp = pm.response.json();

// 4. Спарсить request.
var req = pm.request.url.query.toObject();
console.log(req)
// 5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Name", function () {
    pm.expect(resp.name).to.eql(req.name);
});

// 6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Age", function () {
    pm.expect(resp.age).to.eql(1*req.age);
});
// 7. Вывести в консоль параметр salary из request.
console.log(req.salary);

// 8. Вывести в консоль параметр salary из response.
console.log(resp.salary);

// 9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(resp.salary[0]);

// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(resp.salary[1]);

// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(resp.salary[2]);

// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Salary0", function () {
    pm.expect(resp.salary[0]).to.eql(+req.salary);
});

// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)

pm.test("Salary1", function () {
    pm.expect(+resp.salary[1]).to.eql(req.salary*2);
});

// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Salary2", function () {
    pm.expect(+resp.salary[2]).to.eql(req.salary*3);
});

// 15. Создать в окружении переменную name
// 16. Создать в окружении переменную age
// 17. Создать в окружении переменную salary

// 18. Передать в окружение переменную name
pm.environment.set("name", req.name);
// 19. Передать в окружение переменную age
pm.environment.set("age", req.age);
// 20. Передать в окружение переменную salary
pm.environment.set("salary", req.salary);

// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
var count = 1;
for (i of resp.salary) {
    console.log(count,i);
    count++
    }
